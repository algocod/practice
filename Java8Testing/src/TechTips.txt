Prob : Find if a string can be created by inserting ab at any random position.
Solu : This is the parenthesis problem so push in stack if there is 'a' and pop from stack if its 'b'. Success if stack is empty else false.

Find solid squares in a grid
> Anagrams of a string : First way is to do an ascii array and keep a count , this would be O(n) and keep doing the same on the other string
	>> Other way is to sort the letters of the string and then compare them. If they are anagram of each other, they will match exactly.
Some usual plots :
> Arrays where the cell can be incremented like 20th element a[20]++
> For duplicates or pairs , usual choice is sorting , or hashmap
> For storing key vals, one can use a 2d array or two single arrays where a[0] is key and b[0] is value or ab[0][1] where first col is key and second is value.
> For integers, do a sum, or minus from a sum
> Try partioning into half, one/third etc to reduce the problem size
> For LRU, store the key in the hasmap and the actual Nodes as value. These nodes are part of a doubly linked list and you can take it out and fix it.
> For Least Frequently Used, use a min heap
> For recursive functions, look for the seed of the function, the initial condition , the exit condition .
> Storing memoized values in a hashmap or an array for an index is a better solution.
> How to store values in HashMap for a set of keys ? lets say a num total and index i : String.valueOf(total)+String.valueOf(i);
> For adding Binary numbers lets say Sum then result = Sum%2 and carry = Sum/2
> For finding duplicates in an array, HashMap or HashSet is the best, if only k elements then remove on addition of next element.
> TreeMap/Set is a self balanced BST.
> For the max Profit in an array of prices: Start looking from the end of the array CurrMax = Max(cmax,price[n]), profit = cmax-price[i] , pmax = Max(pmax,profit)
> To get a max out of an array try looking from the right direction.
> To rotate an array, first find out the new co-ordinates based on the starting like new_i,new_j = rotate(i,j);  
> Min window of a matching given String in a big String. Use Hashmap to confirm if all of the pattern elements are present, if a window is found then try minimizing it
and post that, keep looking for another window.
> Celebrity in a room where she doesnt know anybody but rest everybody knows her using min amount of function calls. Trick here is to use the boolean answer from
a single function in two ways like below  with two pointers a and b. 
while (a < b)  
        { 
            if (knows(a, b)) 
                a++; 
            else
                b--; 
        } 
  

===============================HEAP TRICKS====================================
pq.offer(a) // lets say pq is a min heap.
pq.offer(-a) // this will create a max heap for the same set of values. 
Helps to find median where one needs keep track of max element from left side and min element from right side.
Skyline problem as well//dig on it.

Heaps hard problems have one thing in common , they require a pre-sorting of inputs first, do this step and then add them to a heap OR
you can sort using heap in the first step. Either ways, separating the problems in two parts makes it easier. 

EASY CODING
To remove a negative check in a recursive function, its better to make a check while calling the function itself like below

// Steps problem
for(int i : intNumOfSteps)//intArr = {1,3,5}
if(n-i)>0 result += callRecurSteps(n-i);
In the step above recursive function call is being made which can be reduced further by memoization or storing pre-results.
numways[n+1], to accommodate for the zero steps hence +1
numways[0]=1
for i =1 to n
	total=0
	  for j in (1,3,5)
	    if(i-j)>=0 total +=numways[i-j]
	  nums[i] = total;
  return nums[n];
if the steps was to take only 1 or 2 then
Just store the last two values and keep computing them like
[1,1] for 0 and 1 steps so for n=2 it will be a[0] +a[1]
[2,1] and so on [2,3] , [5,3]